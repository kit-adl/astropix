/*
 * ATLASPix3_SoftAndFirmware
 * Copyright (C) 2019  Rudolf Schimassek (rudolf.schimassek@kit.edu)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef INJECTION_CONFIG_H
#define INJECTION_CONFIG_H

/************************************************************************************
 * Class for managing injections with the GECCO board                               *
 *                                                                                  *
 * It is derives from the voltageboard class as the GECCO injection board does also *
 * include 2 14bit DACs for voltage generation for the 2 injection circuits and the *
 * configuration sequence for them is the same as for the voltage boards.           *
 *   In addition, the class also manages the pulse generation settings and the      *
 * synchronisation settings.                                                        *
 *                                                                                  *
 * Author: Rudolf Schimassek                                                        *
 * Version: 1.0 (23.08.19)                                                          *
 ************************************************************************************/


#include "libs/tinyxml2_addon.h"
#include "libs/vb_config.h"

class Injection_Config : public VB_Config
{
public:
    /**
     * @brief Injection_Config constructor
     */
    Injection_Config();

    ///important values for the usage of the class
    enum AddressAndFlags {OutputSyncAddress = 5,       //Register File address for Output selection and synchronisation setting
                          SyncFlag   = 4,              //flag for sync mode
                          GECCO      = 1,              //flag for injection via GECCO injection card
                          ATLASPix3  = 2};             //flag for direct signal to internal ATLASPix injection circuit

    /**
     * @brief GetNumPulseSets returns the number of pulse sets generated by starting starting
     *      the module once
     *
     * @return              - the number of pulse sets per start
     */
    unsigned int GetNumPulseSets() const;
    /**
     * @brief SetNumPulseSets changes the number of pulse sets per start
     * @param value         - new number of pulses, limited to 65536 in firmware
     * @return              - true on successful updating, false otherwise
     */
    bool SetNumPulseSets(unsigned int value);

    /**
     * @brief GetNumPulsesInaSet returns the number of pulses in one set
     *  where a set means that the pulses form a 50% duty cycle pattern
     * @return              - number of pulses in one set
     */
    unsigned int GetNumPulsesInaSet() const;
    /**
     * @brief SetNumPulsesInaSet changes the number of pulses directly followind each other in
     *      one set
     * @param value         - new number of pulses in one set (maximum 255)
     * @return              - true on successful update, false otherwise
     */
    bool SetNumPulsesInaSet(unsigned int value);

    /**
     * @brief GetInitDelay provides the delay after the starting signal to the first pulse
     * @return              - the number of pattern generator clock cycles after a start signal
     *                          to the first output pulse
     */
    unsigned int GetInitDelay() const;
    /**
     * @brief SetInitDelay changes thedelay after the start signal to the first output pulse
     * @param value         - number of pattern generator clock cycles after a start signal
     *                          (max 65536)
     * @return              - true on successful update, false otherwise
     */
    bool SetInitDelay(unsigned int value);

    /**
     * @brief GetPeriod returns the period of the pulses in pattern generator clock cycles
     * @return              - number of pattern generator clock cycles
     */
    unsigned int GetPeriod() const;
    /**
     * @brief SetPeriod changes the period of the output pulses also changing their length
     * @param value         - new number of pattern generator clock cycles as period (max 255)
     * @return              - true on successful update, false otherwise
     */
    bool SetPeriod(unsigned int value);

    /**
     * @brief GetClockDiv provides the clock divider setting from the 100MHz base clock to form
     *          the pattern generator clock
     * @return              - pattern generator clock clock divider
     */
    unsigned int GetClockDiv() const;
    /**
     * @brief SetClockDiv changes the pattern generator clock divider
     * @param value         - new clock divider value (max 65536)
     * @return              - true on successful update, false otherwise
     */
    bool SetClockDiv(unsigned int value);

    /**
     * @brief GetSynced retrieves the synchronisation setting of the pattern generator
     * @return              - true for synchronous mode, false for asynchronous mode
     */
    bool GetSynced() const;
    /**
     * @brief SetSynced changes the synchronisation mode of the pattern generator
     * @param value         - true for synchronous mode, false for asynchronous mode
     * @return              - always true
     */
    bool SetSynced(bool value);

    bool GetTSOverflowSync() const;
    bool SetTSOverflowSync(bool sync);

    /**
     * @brief GetOutputChannel returns the output channel of the pattern generator
     * @return              - flag combination of GECCO (1) and ATLASPix3 (2)
     */
    int  GetOutputChannel();
    /**
     * @brief SetOutputChannel changes the output channel of the pattern generator
     * @param flags         - the new output channel(s) of the pattern generator
     *                          other flags than GECCO (1) or ATLASPix3 (2) have no effect
     * @return              - always true
     */
    bool SetOutputChannel(int flags);

    /**
     * @brief LoadFromXMLElement extracts the data for this object from an XML subtree
     * @param root          - root node of the subtree to load the data from
     * @return              - XML_NO_ERROR on success or an error code
     */
    tinyxml2::XMLError LoadFromXMLElement(tinyxml2::XMLElement* node);
    /**
     * @brief SaveToXMLElement generates an XML tree structure from the contained data for the
     *          passed XML document
     * @param doc           - XML document to host the tree to build
     * @param devicename    - string to override the stored device name / identification string of
     *                          the instance, keep empty to use the internal one
     * @return              - the root node of the XML tree structure or a null pointer on an error
     */
    tinyxml2::XMLElement* SaveToXMLElement(tinyxml2::XMLDocument& doc, std::string devicename = "");

    ///The LoadFromXMLFile() and SaveToXMLFile() methods are interited from VB_Config and as
    /// LoadFromXMLElement() and SaveToXMLElement() are virtual methods the ...File() methods do
    /// not have to be reimplemented
private:
    unsigned int numpulsesets; //16bit
    unsigned int numpulsesinaset; // 8bit
    unsigned int initdelay; //16bit
    unsigned int period; //8bit
    unsigned int clockdiv;  //16bit
    bool         synced;
    bool         tsoverflowsync;
    int          outputchannel;
};

#endif // INJECTION_CONFIG_H
